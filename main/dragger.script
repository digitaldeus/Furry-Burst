-- 720 x 1280

function log(message, use_separator)
	if use_separator then
		print('--- ' .. message .. ' ---')
	else
		print(message)
	end
end

local camera = require "orthographic.camera"

local JOINT_ID = "dragger_joint"

local function collisionobject_path_for(id)
	return msg.url(nil, id, "collisionobject")
end


local function remove_all_joints(self)
	log('removing all joints', true)
	for k, v in pairs(self.joints) do
		physics.destroy_joint(v, JOINT_ID)
		self.joints[k] = nil
	end

	self.last_joint = go.get_id()

	log('done removing all joints', true)
end

local function add_joint(self, other_id)
	log('adding joint between', true)
	log(self.last_joint)
	log("and")
	log(other_id)

	assert(self.joints[other_id] == nil, "joint already exists for this object")

	local other_url = collisionobject_path_for(other_id)
	local last_joint_url = collisionobject_path_for(self.last_joint)
	local joint_length = 75

	if self.last_joint ~= go.get_id() then
		joint_length = 150
	end
	
	physics.create_joint(physics.JOINT_TYPE_FIXED, other_url, JOINT_ID, vmath.vector3(0), last_joint_url, vmath.vector3(0), { max_length = joint_length, collide_connect = self.last_joint ~= go.get_id() })
	
	self.joints[other_id] = other_url

	self.last_joint = other_id
	
	log('done adding joint', true)
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.camera = hash("/camera")
	self.dragging = false
	self.joints = {}

	self.last_joint = go.get_id()
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if not action.released then
			self.dragging = true
			local screen_coords = vmath.vector3( action.x, action.y, 0)
			local pos = camera.screen_to_world(self.camera, screen_coords)

			go.set_position(pos)
		else
			if self.dragging then
				self.dragging = false

				remove_all_joints(self)
				go.set_position(vmath.vector3(20000))
			end
		end
	end
end

function on_message(self, message_id, message)
	if message_id == hash("contact_point_response") then
		local is_in_group = message.other_group == hash("animals")
		
		if is_in_group and not self.joints[message.other_id] then
			add_joint(self, message.other_id)
		end
	end
end
