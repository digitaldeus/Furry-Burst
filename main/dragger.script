-- 720 x 1280

require('main.utils')

function log(message)
	print('--- ' .. tostring(message) .. ' ---')
end

local camera = require "orthographic.camera"

local JOINT_ID = "dragger_joint"


-- animation settings
local scale_selected = .85
local scale_unselected = 0.75
local scale_time = .1

local function collisionobject_path_for(id)
	return msg.url(nil, id, "collisionobject")
end

local current_type

local function remove_all_joints(self)
	log('removing all joints', true)

	local animals_removed = #self.joints
	local remove_go = animals_removed >= 3
	for k, v in pairs(self.joints) do
		physics.destroy_joint(collisionobject_path_for(v), JOINT_ID)
		self.joints[k] = nil

		if remove_go then
			go.delete(v)
		else
			go.animate(v, 'scale', go.PLAYBACK_ONCE_FORWARD, scale_unselected, go.EASING_OUTSINE, scale_time)
		end
	end

	if remove_go then
		msg.post('/controller', 'animals_gone', {subtract=animals_removed})
	end

	log('done removing all joints', true)
end

local function create_joint(start_url, end_url, joint_length, collide)
	collide = collide or false
	log('creating joint between')
	print(start_url)
	print(end_url)
	
	-- physics.create_joint(physics.JOINT_TYPE_FIXED, start_url, JOINT_ID, vmath.vector3(0), end_url, vmath.vector3(0), { max_length = joint_length, collide_connect = collide })
	physics.create_joint(physics.JOINT_TYPE_SPRING, start_url, JOINT_ID, vmath.vector3(0), end_url, vmath.vector3(0), { length = joint_length, frequency=10, damping=0, collide_connect = collide })
	
	log('done creating joint')
end

local function add_link(self, other_id)
	assert(not table_contains(self.joints, collisionobject_path_for(other_id)), "joint already exists for this object")
	log("add link")

	local other_url = collisionobject_path_for(other_id)
	local other_type = go.get(msg.url(nil, other_id, 'script'), 'type')
	local self_url = collisionobject_path_for(go.get_id())

	if self.joints[1] then
		-- print(self.current_type)
		-- print(other_type)
		if self.current_type ~= other_type then
			-- we should only be colliding with the current chain type
			return
		end
		
		local first_joint_url = collisionobject_path_for(self.joints[1])

		log("destring joint")
		-- print(first_joint_url)
		physics.destroy_joint(first_joint_url, JOINT_ID)
		
		create_joint(first_joint_url, other_url, 125)
	else
		self.current_type = other_type
	end
	
	create_joint(other_url, self_url, 75, true)
	go.animate(other_id, 'scale', go.PLAYBACK_ONCE_FORWARD, scale_selected, go.EASING_OUTSINE, scale_time)
	
	table.insert(self.joints, 1, other_id)
	-- pprint(self.joints)
	log("end add link")
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.camera = hash("/camera")
	self.dragging = false
	self.joints = {}
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if not action.released then
			self.dragging = true
			local screen_coords = vmath.vector3( action.x, action.y, 0)
			local pos = camera.screen_to_world(self.camera, screen_coords)

			go.set_position(pos)
		else
			if self.dragging then
				self.dragging = false

				remove_all_joints(self)
			end

			go.set_position(vmath.vector3(20000))
		end
	end
end

function on_message(self, message_id, message)
	if message_id == hash("contact_point_response") then
		local is_in_group = message.other_group == hash("animals")
		if is_in_group and not table_contains(self.joints, message.other_id) then 
			add_link(self, message.other_id)
		end
	end
end
