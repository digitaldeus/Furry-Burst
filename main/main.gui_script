function init(self)

	self.button = gui.get_node('start_button')
	self.button_position = gui.get_position(self.button)
	self.button_scale = gui.get_scale(self.button)
	
	self.title = gui.get_node(hash('title'))
	self.title_position = gui.get_position(self.title)
end

function start_game(self, should_start)
	if should_start then
		return function ()
			really_start_game(self)
		end
	end
end

function really_start_game(self)
	local move_time = .75
	gui.animate(self.title, 'position', self.title_position + vmath.vector3(0, 500, 0), gui.EASING_INOUTSINE, move_time)
	gui.animate(self.button, 'position', self.button_position + vmath.vector3(500, 0, 0), gui.EASING_INOUTSINE, move_time)

	msg.post('/controller', 'start_game')
	msg.post('/dragger', 'start_game')
end

function end_game(self)
	local move_time = .75
	gui.animate(self.title, 'position', self.title_position, gui.EASING_INOUTSINE, move_time)
	gui.animate(self.button, 'position', self.button_position, gui.EASING_INOUTSINE, move_time)
end

function on_message(self, message_id, message)
	if message_id == hash('end_game') then
		print('game ended')
		msg.post('/dragger', 'game_ended')
		end_game(self)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if action.pressed then
			print('animating')
			
			if gui.pick_node(self.button, action.x, action.y) then
				gui.animate(self.button, 'scale', self.button_scale * .9, gui.EASING_OUTBACK, .25, gui.PLAYBACK_ONCE_FORWARD)
				self.pressing_button = true
			end
		elseif action.released then
			gui.animate(self.button, 'scale', self.button_scale, gui.EASING_OUTBOUNCE, .5, gui.PLAYBACK_ONCE_FORWARD, start_game(
				self, gui.pick_node(self.button, action.x, action.y)
			))
			self.pressing_button = false
		end
	end
end
